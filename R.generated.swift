// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import UIKit

struct R {
  static func validate() {
    storyboard.login.validateImages()
    storyboard.login.validateViewControllers()
    storyboard.launchScreen.validateImages()
    storyboard.launchScreen.validateViewControllers()
    storyboard.me.validateImages()
    storyboard.me.validateViewControllers()
    storyboard.message.validateImages()
    storyboard.message.validateViewControllers()
    storyboard.search.validateImages()
    storyboard.search.validateViewControllers()
    storyboard.main.validateImages()
    storyboard.main.validateViewControllers()
  }
  
  struct file {
    static var iQKeyboardManagerBundle: NSURL? { return _R.hostingBundle?.URLForResource("IQKeyboardManager", withExtension: "bundle") }
    static var infoPlist: NSURL? { return _R.hostingBundle?.URLForResource("Info", withExtension: "plist") }
    static var mHTabBarActiveTab2xPng: NSURL? { return _R.hostingBundle?.URLForResource("MHTabBarActiveTab@2x", withExtension: "png") }
    static var mHTabBarActiveTabPng: NSURL? { return _R.hostingBundle?.URLForResource("MHTabBarActiveTab", withExtension: "png") }
    static var mHTabBarInactiveTab2xPng: NSURL? { return _R.hostingBundle?.URLForResource("MHTabBarInactiveTab@2x", withExtension: "png") }
    static var mHTabBarInactiveTabPng: NSURL? { return _R.hostingBundle?.URLForResource("MHTabBarInactiveTab", withExtension: "png") }
    static var mHTabBarIndicator2xPng: NSURL? { return _R.hostingBundle?.URLForResource("MHTabBarIndicator@2x", withExtension: "png") }
    static var mHTabBarIndicatorPng: NSURL? { return _R.hostingBundle?.URLForResource("MHTabBarIndicator", withExtension: "png") }
    static var mJRefreshBundle: NSURL? { return _R.hostingBundle?.URLForResource("MJRefresh", withExtension: "bundle") }
    static var public_keyDer: NSURL? { return _R.hostingBundle?.URLForResource("public_key", withExtension: "der") }
    static var tZImagePickerControllerBundle: NSURL? { return _R.hostingBundle?.URLForResource("TZImagePickerController", withExtension: "bundle") }
    static var whiteplaceholderPng: NSURL? { return _R.hostingBundle?.URLForResource("whiteplaceholder", withExtension: "png") }
  }
  
  struct font {
    
  }
  
  struct image {
    static var add: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "add", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "add") } }
    static var add_1: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "add_1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "add_1") } }
    static var add_2: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "add_2", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "add_2") } }
    static var aratar: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "aratar", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "aratar") } }
    static var bg: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "bg", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "bg") } }
    static var brandAssets: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "Brand Assets", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "Brand Assets") } }
    static var camera: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "camera", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "camera") } }
    static var close_eye: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "close_eye", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "close_eye") } }
    static var default1: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "default1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "default1") } }
    static var left: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "left", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "left") } }
    static var lock: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "lock", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "lock") } }
    static var longshengLG: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "longshengLG", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "longshengLG") } }
    static var mHTabBarActiveTab: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "MHTabBarActiveTab", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "MHTabBarActiveTab") } }
    static var mHTabBarInactiveTab: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "MHTabBarInactiveTab", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "MHTabBarInactiveTab") } }
    static var mHTabBarIndicator: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "MHTabBarIndicator", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "MHTabBarIndicator") } }
    static var message: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "message", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "message") } }
    static var message_1: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "message_1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "message_1") } }
    static var open_eye: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "open_eye", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "open_eye") } }
    static var pen: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "pen", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "pen") } }
    static var remove_2: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "remove_2", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "remove_2") } }
    static var remvoe: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "remvoe", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "remvoe") } }
    static var right: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "right", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "right") } }
    static var right_1: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "right_1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "right_1") } }
    static var search: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "search", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "search") } }
    static var search2: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "search2", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "search2") } }
    static var search_0: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "search_0", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "search_0") } }
    static var search_1: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "search_1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "search_1") } }
    static var search_3: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "search_3", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "search_3") } }
    static var search_4: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "search_4", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "search_4") } }
    static var search_6: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "search_6", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "search_6") } }
    static var searchhui: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "searchhui", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "searchhui") } }
    static var smile: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "smile", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "smile") } }
    static var user: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "user", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "user") } }
    static var user_0: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "user_0", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "user_0") } }
    static var user_1: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "user_1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "user_1") } }
    static var user_2: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "user_2", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "user_2") } }
    static var user_3: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "user_3", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "user_3") } }
    static var voice: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "voice", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "voice") } }
    static var whiteplaceholder: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "whiteplaceholder", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "whiteplaceholder") } }
    static var zan: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "zan", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "zan") } }
    static var zan1: UIImage? { if #available(iOS 8.0, *) { return UIImage(named: "zan1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) } else { return UIImage(named: "zan1") } }
  }
  
  struct nib {
    static var messageChatCell: _R.nib._MessageChatCell { return _R.nib._MessageChatCell() }
    static var noMessageView: _R.nib._NoMessageView { return _R.nib._NoMessageView() }
    static var showImgsCell: _R.nib._ShowImgsCell { return _R.nib._ShowImgsCell() }
  }
  
  struct reuseIdentifier {
    static var accountCenterBGCell: ReuseIdentifier<AccountCenterBGCell> { return ReuseIdentifier(identifier: "AccountCenterBGCell") }
    static var accountCenterBlankCell: ReuseIdentifier<AccountCenterBlankCell> { return ReuseIdentifier(identifier: "AccountCenterBlankCell") }
    static var accountCenterContentCell: ReuseIdentifier<AccountCenterContentCell> { return ReuseIdentifier(identifier: "AccountCenterContentCell") }
    static var accountCenterSignOutCell: ReuseIdentifier<AccountCenterSignOutCell> { return ReuseIdentifier(identifier: "AccountCenterSignOutCell") }
    static var img: ReuseIdentifier<ShowImgsCell> { return ReuseIdentifier(identifier: "img") }
    static var interestingCVCell: ReuseIdentifier<InterestingCVCell> { return ReuseIdentifier(identifier: "InterestingCVCell") }
    static var interestingTVCell: ReuseIdentifier<InterestingTVCell> { return ReuseIdentifier(identifier: "InterestingTVCell") }
    static var interestingTipsCell: ReuseIdentifier<InterestingTipsCell> { return ReuseIdentifier(identifier: "InterestingTipsCell") }
    static var item_cell: ReuseIdentifier<MessageChatCell> { return ReuseIdentifier(identifier: "item_cell") }
    static var publishNotificationTVCell: ReuseIdentifier<PublishNotificationTVCell> { return ReuseIdentifier(identifier: "PublishNotificationTVCell") }
    static var publishNotificationUpLoadImageCVCell: ReuseIdentifier<PublishNotificationUpLoadImageCVCell> { return ReuseIdentifier(identifier: "PublishNotificationUpLoadImageCVCell") }
    static var registerLabelCell: ReuseIdentifier<RegisterLabelCell> { return ReuseIdentifier(identifier: "RegisterLabelCell") }
    static var registerNextCell: ReuseIdentifier<RegisterNextCell> { return ReuseIdentifier(identifier: "RegisterNextCell") }
    static var registerResendCell: ReuseIdentifier<RegisterResendCell> { return ReuseIdentifier(identifier: "RegisterResendCell") }
    static var registerTextFieldCell: ReuseIdentifier<RegisterTextFieldCell> { return ReuseIdentifier(identifier: "RegisterTextFieldCell") }
    static var timeTBCVCell: ReuseIdentifier<TimeTBCVCell> { return ReuseIdentifier(identifier: "TimeTBCVCell") }
    static var timeTVCell: ReuseIdentifier<TimeTVCell> { return ReuseIdentifier(identifier: "TimeTVCell") }
  }
  
  struct segue {
    
  }
  
  struct storyboard {
    struct launchScreen {
      static var initialViewController: UIViewController? { return instance.instantiateInitialViewController() }
      static var instance: UIStoryboard { return UIStoryboard(name: "LaunchScreen", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct login {
      static var homeVC: HomeVC? { return instance.instantiateViewControllerWithIdentifier("HomeVC") as? HomeVC }
      static var instance: UIStoryboard { return UIStoryboard(name: "Login", bundle: _R.hostingBundle) }
      static var loginTVC: LoginTVC? { return instance.instantiateViewControllerWithIdentifier("LoginTVC") as? LoginTVC }
      static var login_nav: PresentNavC? { return instance.instantiateViewControllerWithIdentifier("login_nav") as? PresentNavC }
      static var registerTVC: RegisterTVC? { return instance.instantiateViewControllerWithIdentifier("RegisterTVC") as? RegisterTVC }
      
      static func validateImages() {
        assert(UIImage(named: "add_2") != nil, "[R.swift] Image named 'add_2' is used in storyboard 'Login', but couldn't be loaded.")
        assert(UIImage(named: "longshengLG") != nil, "[R.swift] Image named 'longshengLG' is used in storyboard 'Login', but couldn't be loaded.")
        assert(UIImage(named: "open_eye") != nil, "[R.swift] Image named 'open_eye' is used in storyboard 'Login', but couldn't be loaded.")
        assert(UIImage(named: "close_eye") != nil, "[R.swift] Image named 'close_eye' is used in storyboard 'Login', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(loginTVC != nil, "[R.swift] ViewController with identifier 'loginTVC' could not be loaded from storyboard 'Login' as 'LoginTVC'.")
        assert(registerTVC != nil, "[R.swift] ViewController with identifier 'registerTVC' could not be loaded from storyboard 'Login' as 'RegisterTVC'.")
        assert(login_nav != nil, "[R.swift] ViewController with identifier 'login_nav' could not be loaded from storyboard 'Login' as 'PresentNavC'.")
        assert(homeVC != nil, "[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'Login' as 'HomeVC'.")
      }
    }
    
    struct main {
      static var initialViewController: ViewController? { return instance.instantiateInitialViewController() as? ViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Main", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct me {
      static var accountCenterTVC: AccountCenterTVC? { return instance.instantiateViewControllerWithIdentifier("AccountCenterTVC") as? AccountCenterTVC }
      static var installWebviewVC: InstallWebviewVC? { return instance.instantiateViewControllerWithIdentifier("InstallWebviewVC") as? InstallWebviewVC }
      static var instance: UIStoryboard { return UIStoryboard(name: "Me", bundle: _R.hostingBundle) }
      static var me_nav: QuarkNavigationController? { return instance.instantiateViewControllerWithIdentifier("me_nav") as? QuarkNavigationController }
      static var modifyNickNameVC: ModifyNickNameVC? { return instance.instantiateViewControllerWithIdentifier("ModifyNickNameVC") as? ModifyNickNameVC }
      
      static func validateImages() {
        assert(UIImage(named: "pen") != nil, "[R.swift] Image named 'pen' is used in storyboard 'Me', but couldn't be loaded.")
        assert(UIImage(named: "aratar") != nil, "[R.swift] Image named 'aratar' is used in storyboard 'Me', but couldn't be loaded.")
        assert(UIImage(named: "right_1") != nil, "[R.swift] Image named 'right_1' is used in storyboard 'Me', but couldn't be loaded.")
        assert(UIImage(named: "bg") != nil, "[R.swift] Image named 'bg' is used in storyboard 'Me', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(me_nav != nil, "[R.swift] ViewController with identifier 'me_nav' could not be loaded from storyboard 'Me' as 'QuarkNavigationController'.")
        assert(accountCenterTVC != nil, "[R.swift] ViewController with identifier 'accountCenterTVC' could not be loaded from storyboard 'Me' as 'AccountCenterTVC'.")
        assert(modifyNickNameVC != nil, "[R.swift] ViewController with identifier 'modifyNickNameVC' could not be loaded from storyboard 'Me' as 'ModifyNickNameVC'.")
        assert(installWebviewVC != nil, "[R.swift] ViewController with identifier 'installWebviewVC' could not be loaded from storyboard 'Me' as 'InstallWebviewVC'.")
      }
    }
    
    struct message {
      static var instance: UIStoryboard { return UIStoryboard(name: "Message", bundle: _R.hostingBundle) }
      static var messageChatListViewController: MessageChatListViewController? { return instance.instantiateViewControllerWithIdentifier("MessageChatListViewController") as? MessageChatListViewController }
      static var message_nav: QuarkNavigationController? { return instance.instantiateViewControllerWithIdentifier("message_nav") as? QuarkNavigationController }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        assert(message_nav != nil, "[R.swift] ViewController with identifier 'message_nav' could not be loaded from storyboard 'Message' as 'QuarkNavigationController'.")
        assert(messageChatListViewController != nil, "[R.swift] ViewController with identifier 'messageChatListViewController' could not be loaded from storyboard 'Message' as 'MessageChatListViewController'.")
      }
    }
    
    struct search {
      static var instance: UIStoryboard { return UIStoryboard(name: "Search", bundle: _R.hostingBundle) }
      static var interestingTVC: InterestingTVC? { return instance.instantiateViewControllerWithIdentifier("InterestingTVC") as? InterestingTVC }
      static var publishNotificationTVC: PublishNotificationTVC? { return instance.instantiateViewControllerWithIdentifier("PublishNotificationTVC") as? PublishNotificationTVC }
      static var searchVC: SearchVC? { return instance.instantiateViewControllerWithIdentifier("SearchVC") as? SearchVC }
      static var search_nav: QuarkNavigationController? { return instance.instantiateViewControllerWithIdentifier("search_nav") as? QuarkNavigationController }
      static var timeTBC: TimeTBC? { return instance.instantiateViewControllerWithIdentifier("TimeTBC") as? TimeTBC }
      
      static func validateImages() {
        assert(UIImage(named: "remvoe") != nil, "[R.swift] Image named 'remvoe' is used in storyboard 'Search', but couldn't be loaded.")
        assert(UIImage(named: "zan") != nil, "[R.swift] Image named 'zan' is used in storyboard 'Search', but couldn't be loaded.")
        assert(UIImage(named: "longshengLG") != nil, "[R.swift] Image named 'longshengLG' is used in storyboard 'Search', but couldn't be loaded.")
        assert(UIImage(named: "add") != nil, "[R.swift] Image named 'add' is used in storyboard 'Search', but couldn't be loaded.")
        assert(UIImage(named: "camera") != nil, "[R.swift] Image named 'camera' is used in storyboard 'Search', but couldn't be loaded.")
        assert(UIImage(named: "user_2") != nil, "[R.swift] Image named 'user_2' is used in storyboard 'Search', but couldn't be loaded.")
        assert(UIImage(named: "default1") != nil, "[R.swift] Image named 'default1' is used in storyboard 'Search', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(search_nav != nil, "[R.swift] ViewController with identifier 'search_nav' could not be loaded from storyboard 'Search' as 'QuarkNavigationController'.")
        assert(interestingTVC != nil, "[R.swift] ViewController with identifier 'interestingTVC' could not be loaded from storyboard 'Search' as 'InterestingTVC'.")
        assert(publishNotificationTVC != nil, "[R.swift] ViewController with identifier 'publishNotificationTVC' could not be loaded from storyboard 'Search' as 'PublishNotificationTVC'.")
        assert(searchVC != nil, "[R.swift] ViewController with identifier 'searchVC' could not be loaded from storyboard 'Search' as 'SearchVC'.")
        assert(timeTBC != nil, "[R.swift] ViewController with identifier 'timeTBC' could not be loaded from storyboard 'Search' as 'TimeTBC'.")
      }
    }
  }
}

struct _R {
  static var hostingBundle: NSBundle? { return NSBundle(identifier: "com.quark.longshengtongxun") }
  
  struct nib {
    struct _MessageChatCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "MessageChatCell", bundle: _R.hostingBundle) }
      var name: String { return "MessageChatCell" }
      var reuseIdentifier: ReuseIdentifier<MessageChatCell> { return ReuseIdentifier(identifier: "item_cell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> MessageChatCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? MessageChatCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _NoMessageView: NibResource {
      var instance: UINib { return UINib.init(nibName: "NoMessageView", bundle: _R.hostingBundle) }
      var name: String { return "NoMessageView" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> NoMessageView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? NoMessageView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _ShowImgsCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "ShowImgsCell", bundle: _R.hostingBundle) }
      var name: String { return "ShowImgsCell" }
      var reuseIdentifier: ReuseIdentifier<ShowImgsCell> { return ReuseIdentifier(identifier: "img") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> ShowImgsCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? ShowImgsCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
  }
}

struct ReuseIdentifier<T>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

struct StoryboardSegueIdentifier<Segue: UIStoryboardSegue, Source: UIViewController, Destination: UIViewController>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

struct TypedStoryboardSegueInfo<Segue: UIStoryboardSegue, Source: UIViewController, Destination: UIViewController>: CustomStringConvertible {
  let destinationViewController: Destination
  let identifier: String?
  let segue: Segue
  let sourceViewController: Source
  
  var description: String { return identifier ?? "" }
  
   init?(segue: UIStoryboardSegue) {
    guard let segue = segue as? Segue, sourceViewController = segue.sourceViewController as? Source, destinationViewController = segue.destinationViewController as? Destination else { return nil }
    self.segue = segue
    self.identifier = segue.identifier
    self.sourceViewController = sourceViewController
    self.destinationViewController = destinationViewController
  }
}

protocol NibResource {
  var instance: UINib { get }
  var name: String { get }
}

protocol Reusable {
  typealias T
  
  var reuseIdentifier: ReuseIdentifier<T> { get }
}

extension UITableView {
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath?) -> T? {
    if let indexPath = indexPath {
      return dequeueReusableCellWithIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
    }
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableHeaderFooterViewWithIdentifier<T : UITableViewHeaderFooterView>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableHeaderFooterViewWithIdentifier(identifier.identifier) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibForHeaderFooterView<T: NibResource where T: Reusable, T.T: UIView>(nibResource: T) {
    registerNib(nibResource.instance, forHeaderFooterViewReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
}

extension UICollectionView {
  func dequeueReusableCellWithReuseIdentifier<T: UICollectionViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableCellWithReuseIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func dequeueReusableSupplementaryViewOfKind<T: UICollectionReusableView>(elementKind: String, withReuseIdentifier identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableSupplementaryViewOfKind(elementKind, withReuseIdentifier: identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellWithReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResource: T, forSupplementaryViewOfKind kind: String) {
    registerNib(nibResource.instance, forSupplementaryViewOfKind: kind, withReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResources: [T], forSupplementaryViewOfKind kind: String) {
    nibResources.forEach { self.registerNib($0, forSupplementaryViewOfKind: kind) }
  }
}

extension UIViewController {
  convenience init(nib: NibResource) {
    self.init(nibName: nib.name, bundle: _R.hostingBundle)
  }
}

extension UIViewController {
  func performSegueWithIdentifier<Segue: UIStoryboardSegue,Source: UIViewController,Destination: UIViewController>(identifier: StoryboardSegueIdentifier<Segue, Source, Destination>, sender: AnyObject?) {
    performSegueWithIdentifier(identifier.identifier, sender: sender)
  }
}

extension UIStoryboardSegue {
  func typedInfoWithIdentifier<Segue: UIStoryboardSegue,Source: UIViewController,Destination: UIViewController>(identifier: StoryboardSegueIdentifier<Segue, Source, Destination>) -> TypedStoryboardSegueInfo<Segue, Source, Destination>? {
    guard self.identifier == identifier.identifier else { return nil }
    return TypedStoryboardSegueInfo(segue: self)
  }
}